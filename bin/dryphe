#!/usr/bin/env python

import os
import sys
import argparse
from dryphe import auth, driveapi

###############################################################################
# utilities 
###############################################################################

def default_auth_file():
    return os.path.expanduser('~/.dryphe/authorization')

def err(message):
    """Print a message to stderr"""
    print >>sys.stderr, message

def get_service(args):
    credentials = auth.get_credentials(args.auth_file)
    if credentials:
        return auth.get_service(credentials)

###############################################################################
# commands
###############################################################################


def auth_init(args):
    """Obtain authorization to access Google Drive"""
    try:
        os.makedirs(os.path.dirname(args.auth_file))
    except OSError:
        if not os.path.isdir(os.path.dirname(args.auth_file)):
            err('Could not create directory for auth file.')
            sys.exit(2)
    try:
        auth.get_credentials(args.auth_file, initialize=True)
    except KeyboardInterrupt:
        pass


def ls(args):
    """List files"""
    service = get_service(args)
    if service:
        api = driveapi.DriveAPI(service)
        try:
           md = api.metadata_for_path(args.path)
        except (driveapi.FileNotFoundError,
                driveapi.InvalidPathError) as e:
            print >>sys.stderr, e.message
            sys.exit(2)
        output_format = ""
        if args.long:
            output_format += "{ft} "
        if args.file_ids:
            output_format += "{fid:<44} "
        if args.md5:
            output_format += "{md5:<32} "
        output_format += "{fp}"
        if md:
            if md.get('mimeType') == driveapi.FOLDER_MIMETYPE:
                children = api.metadata_for_children(md.get('id'))
                if children:
                    output = {}
                    for child in children:
                        output['fp'] = os.path.join(args.path,
                                                    child.get('title'))
                        output['fid'] = child.get('id')
                        output['md5'] = child.get('md5Checksum','-')
                        if child.get('mimeType') == driveapi.FOLDER_MIMETYPE:
                            output['ft'] = 'd'
                        else:
                            output['ft'] = 'f'
                        print output_format.format(**output)
            else:
                print "{} {}".format("f", args.path)
        else:
            print >>sys.stderr, "Error reading metadata for path"
            sys.exit(2)

def get(args):
    """Download files and directories"""
    pass

def put(args):
    """Upload files and directories"""
    pass

def mkdir(args):
    """Create a folder"""
    pass


###############################################################################
# main
###############################################################################


def parse_arguments():
    prsr = argparse.ArgumentParser()
    prsr.add_argument('--auth-file', default=default_auth_file())

    subs = prsr.add_subparsers(help='Commands')

    auth_prsr = subs.add_parser('auth', help=auth_init.__doc__)
    auth_prsr.set_defaults(func=auth_init)

    ls_prsr = subs.add_parser('ls', help=ls.__doc__)
    ls_prsr.add_argument('-l', '--long', action='store_true',
            default=False)
    ls_prsr.add_argument('-i', '--file-ids', action='store_true',
            default=False, help="Show file IDs")
    ls_prsr.add_argument('-5', '--md5', action='store_true',
            default=False, help="Show md5 checksums")
    ls_prsr.add_argument('path', default='root')
    ls_prsr.set_defaults(func=ls)

    mkdir_prsr = subs.add_parser('mkdir', help=mkdir.__doc__)
    mkdir_prsr.add_argument('path', nargs=1)
    mkdir_prsr.set_defaults(func=mkdir)

    get_prsr = subs.add_parser('get', help=get.__doc__)
    get_prsr.add_argument('-f', '--force', action='store_true',
            help="Overwrite existing files", default=False)
    get_prsr.add_argument('-r', '--recursive', action='store_true',
            default=False)
    get_prsr.add_argument('path', nargs="+")
    get_prsr.set_defaults(func=get)

    put_prsr = subs.add_parser('put', help=put.__doc__)
    put_prsr.add_argument('-f', '--force', action='store_true',
            help="Overwrite existing files", default=False)
    put_prsr.add_argument('-c', '--create-dirs', action='store_true',
            help="Create directories if they don't exist", default=False)
    put_prsr.add_argument('-r', '--recursive', action='store_true',
            default=False)
    put_prsr.add_argument('dest', nargs=1)
    put_prsr.add_argument('source', nargs="+")
    put_prsr.set_defaults(func=put)

    return prsr.parse_args(sys.argv[1:])

def main():
    args = parse_arguments()
    args.func(args)


if __name__ == '__main__':
    main()
